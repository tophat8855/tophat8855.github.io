{"componentChunkName":"component---node-modules-gatsby-theme-chronoblog-src-templates-post-js","path":"/reverse-job-interview-problem/","result":{"data":{"mdx":{"id":"3e9ac31c-75b5-5494-a11d-e23850a96604","excerpt":"Yesterday on twitter,  this tweet  got a lot of attention in the developer world. It states: Most candidates cannot solve this interviewâ€¦","frontmatter":{"title":"Reverse Job Interview Problem","date":"2021-02-05T00:00:00.000Z","description":null,"tags":["post","coding","clojure"],"cover":null},"fields":{"slug":"/reverse-job-interview-problem/"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Reverse Job Interview Problem\",\n  \"date\": \"2021-02-05T00:00:00.000Z\",\n  \"tags\": [\"post\", \"coding\", \"clojure\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Yesterday on twitter, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://twitter.com/Al_Grigor/status/1357028887209902088\"\n  }, \"this tweet\"), \" got a lot of attention in the developer world.\"), mdx(\"p\", null, \"It states:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Most candidates cannot solve this interview problem:\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Small orange diamond\\nInput: \\\"aaaabbbcca\\\"\\nSmall orange diamond\\nOutput: \", \"[(\\\"a\\\", 4), (\\\"b\\\", 3), (\\\"c\\\", 2), (\\\"a\\\", 1)]\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Write a function that converts the input to the output\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"I ask it in the screening interview and give it 25 minutes\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"How would you solve it?\")), mdx(\"p\", null, \"I noticed that Clojurian Gene Kim gave \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://twitter.com/RealGeneKim/status/1357460688881389574\"\n  }, \"this response\"), \". \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"(->> (partition-by identity \\\"aaaabbbcca\\\")\\n     (map (fn [x]\\n            [(->> x first str) \\n             (count x)])))\\n\")), mdx(\"p\", null, \"I'm a huge fan of finding a use for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"partition-by\"), \". \"), mdx(\"p\", null, \"On Clojurians, Savo Djuric shared his solution, which he blogged \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://savo.rocks/posts/a-random-job-interview-challenge-in-clojure/\"\n  }, \"here\"), \".\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"defn chop-chop [coll]\\n  (let [x (partition-by identity coll)]\\n    (map list (map (comp str first) x)\\n                (map count x))))\\n=> (chop-chop \\\"aaaabbbcca\\\")\\n=> ((\\\"a\\\" 4) (\\\"b\\\" 3) (\\\"c\\\" 2) (\\\"a\\\" 1))\\n\")), mdx(\"p\", null, \"All of this conversation made me wonder, what if I did it backwards? I'd like to create a function with the input of \"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[(\\\"a\\\", 4), (\\\"b\\\", 3), (\\\"c\\\", 2), (\\\"a\\\", 1)]\")), mdx(\"p\", null, \"and output of the string \"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"aaaabbbcca\\\"\"), \". \"), mdx(\"p\", null, \"So I started playing around with it. I gave myself the restriction that the input \"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"[(\\\"a\\\", 4), (\\\"b\\\", 3), (\\\"c\\\", 2), (\\\"a\\\", 1)]\\n\")), mdx(\"p\", null, \"is\\na vector of lists. Not a list of vecs like Kim's solution and and not list of lists, like Djuric's.\"), mdx(\"p\", null, \"This is what I've come up with.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"(def alpha-num-tuples ['(\\\"a\\\" 4) '(\\\"b\\\" 3) '(\\\"c\\\" 2) '(\\\"a\\\" 1)])\\n\\n(defn tuple-to-chars [tuple] (repeat (last tuple) (first tuple)))\\n\\n(clojure.string/join (mapcat tuple-to-chars alpha-num-tuples))\\n;; \\\"aaaabbbcca\\\"\\n\")), mdx(\"p\", null, \"The function \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tuple-to-chars\"), \" takes ones of the tuples such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(\\\"a\\\" 4)\")), mdx(\"p\", null, \"and returns \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(\\\"a\\\" \\\"a\\\" \\\"a\\\" \\\"a\\\")\"), \". \"), mdx(\"p\", null, \"The result of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mapcat\"), \"-ing all of\\nthe tuples-turned-chars is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(\\\"a\\\" \\\"a\\\" \\\"a\\\" \\\"a\\\" \\\"b\\\" \\\"b\\\" \\\"b\\\" \\\"c\\\" \\\"c\\\" \\\"a\\\")\"), \". \"), mdx(\"p\", null, \"And then simply join the chars to a string!\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"aaaabbbcca\\\"\")), mdx(\"p\", null, \"There is probably a more beautiful or idiomatic way. Let me keep playing with it.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"3e9ac31c-75b5-5494-a11d-e23850a96604"}},"staticQueryHashes":["1961101537","2542493696"]}